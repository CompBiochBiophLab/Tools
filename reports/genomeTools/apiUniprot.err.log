Traceback (most recent call last):
  File "/Users/jordivilla/miniconda3/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/jordivilla/miniconda3/lib/python3.11/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/jordivilla/miniconda3/lib/python3.11/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/jordivilla/miniconda3/lib/python3.11/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/jordivilla/miniconda3/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/jordivilla/miniconda3/lib/python3.11/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/Users/jordivilla/miniconda3/lib/python3.11/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/jordivilla/miniconda3/lib/python3.11/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
def get_protein_sequences(uniprot_list):
    """Retrieves the sequences from the UniProt database based on the list of
    UniProt ids.
    In general, 
        1. Compose your query here with the advanced search tool:
    https://www.uniprot.org/uniprot/?query=id%3Ap40925+OR+id%3Ap40926+OR+id%3Ao43175&sort=score
        2. Replace `&sort=score` with `&format=fasta`
        3. Edit this function as necessary
    Returns:
        protein_dict (dict): the updated dictionary
    """
    # This makes it so we match only the ENTRY field
    uniprot_list = ['id%3A'+id for id in uniprot_list]
    line = '+OR+'.join(uniprot_list)
    url = f'https://www.uniprot.org/uniprot/?query={line}&format=fasta'
    print(url)
    with urllib.request.urlopen(url) as f:
        fasta = f.read().decode('utf-8').strip()
    return fasta
    
uniprot_list = ['P40925', 'P40926']
print(get_protein_sequences(uniprot_list))
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mHTTPError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[2], line 22[0m
[1;32m     19[0m     [38;5;28;01mreturn[39;00m fasta
[1;32m     21[0m uniprot_list [38;5;241m=[39m [[38;5;124m'[39m[38;5;124mP40925[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mP40926[39m[38;5;124m'[39m]
[0;32m---> 22[0m [38;5;28mprint[39m(get_protein_sequences(uniprot_list))

Cell [0;32mIn[2], line 17[0m, in [0;36mget_protein_sequences[0;34m(uniprot_list)[0m
[1;32m     15[0m url [38;5;241m=[39m [38;5;124mf[39m[38;5;124m'[39m[38;5;124mhttps://www.uniprot.org/uniprot/?query=[39m[38;5;132;01m{[39;00mline[38;5;132;01m}[39;00m[38;5;124m&format=fasta[39m[38;5;124m'[39m
[1;32m     16[0m [38;5;28mprint[39m(url)
[0;32m---> 17[0m [38;5;28;01mwith[39;00m urllib[38;5;241m.[39mrequest[38;5;241m.[39murlopen(url) [38;5;28;01mas[39;00m f:
[1;32m     18[0m     fasta [38;5;241m=[39m f[38;5;241m.[39mread()[38;5;241m.[39mdecode([38;5;124m'[39m[38;5;124mutf-8[39m[38;5;124m'[39m)[38;5;241m.[39mstrip()
[1;32m     19[0m [38;5;28;01mreturn[39;00m fasta

File [0;32m~/miniconda3/lib/python3.11/urllib/request.py:216[0m, in [0;36murlopen[0;34m(url, data, timeout, cafile, capath, cadefault, context)[0m
[1;32m    214[0m [38;5;28;01melse[39;00m:
[1;32m    215[0m     opener [38;5;241m=[39m _opener
[0;32m--> 216[0m [38;5;28;01mreturn[39;00m opener[38;5;241m.[39mopen(url, data, timeout)

File [0;32m~/miniconda3/lib/python3.11/urllib/request.py:525[0m, in [0;36mOpenerDirector.open[0;34m(self, fullurl, data, timeout)[0m
[1;32m    523[0m [38;5;28;01mfor[39;00m processor [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocess_response[38;5;241m.[39mget(protocol, []):
[1;32m    524[0m     meth [38;5;241m=[39m [38;5;28mgetattr[39m(processor, meth_name)
[0;32m--> 525[0m     response [38;5;241m=[39m meth(req, response)
[1;32m    527[0m [38;5;28;01mreturn[39;00m response

File [0;32m~/miniconda3/lib/python3.11/urllib/request.py:634[0m, in [0;36mHTTPErrorProcessor.http_response[0;34m(self, request, response)[0m
[1;32m    631[0m [38;5;66;03m# According to RFC 2616, "2xx" code indicates that the client's[39;00m
[1;32m    632[0m [38;5;66;03m# request was successfully received, understood, and accepted.[39;00m
[1;32m    633[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m ([38;5;241m200[39m [38;5;241m<[39m[38;5;241m=[39m code [38;5;241m<[39m [38;5;241m300[39m):
[0;32m--> 634[0m     response [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mparent[38;5;241m.[39merror(
[1;32m    635[0m         [38;5;124m'[39m[38;5;124mhttp[39m[38;5;124m'[39m, request, response, code, msg, hdrs)
[1;32m    637[0m [38;5;28;01mreturn[39;00m response

File [0;32m~/miniconda3/lib/python3.11/urllib/request.py:557[0m, in [0;36mOpenerDirector.error[0;34m(self, proto, *args)[0m
[1;32m    555[0m     http_err [38;5;241m=[39m [38;5;241m0[39m
[1;32m    556[0m args [38;5;241m=[39m ([38;5;28mdict[39m, proto, meth_name) [38;5;241m+[39m args
[0;32m--> 557[0m result [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_call_chain([38;5;241m*[39margs)
[1;32m    558[0m [38;5;28;01mif[39;00m result:
[1;32m    559[0m     [38;5;28;01mreturn[39;00m result

File [0;32m~/miniconda3/lib/python3.11/urllib/request.py:496[0m, in [0;36mOpenerDirector._call_chain[0;34m(self, chain, kind, meth_name, *args)[0m
[1;32m    494[0m [38;5;28;01mfor[39;00m handler [38;5;129;01min[39;00m handlers:
[1;32m    495[0m     func [38;5;241m=[39m [38;5;28mgetattr[39m(handler, meth_name)
[0;32m--> 496[0m     result [38;5;241m=[39m func([38;5;241m*[39margs)
[1;32m    497[0m     [38;5;28;01mif[39;00m result [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[1;32m    498[0m         [38;5;28;01mreturn[39;00m result

File [0;32m~/miniconda3/lib/python3.11/urllib/request.py:749[0m, in [0;36mHTTPRedirectHandler.http_error_302[0;34m(self, req, fp, code, msg, headers)[0m
[1;32m    746[0m fp[38;5;241m.[39mread()
[1;32m    747[0m fp[38;5;241m.[39mclose()
[0;32m--> 749[0m [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39mparent[38;5;241m.[39mopen(new, timeout[38;5;241m=[39mreq[38;5;241m.[39mtimeout)

File [0;32m~/miniconda3/lib/python3.11/urllib/request.py:525[0m, in [0;36mOpenerDirector.open[0;34m(self, fullurl, data, timeout)[0m
[1;32m    523[0m [38;5;28;01mfor[39;00m processor [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocess_response[38;5;241m.[39mget(protocol, []):
[1;32m    524[0m     meth [38;5;241m=[39m [38;5;28mgetattr[39m(processor, meth_name)
[0;32m--> 525[0m     response [38;5;241m=[39m meth(req, response)
[1;32m    527[0m [38;5;28;01mreturn[39;00m response

File [0;32m~/miniconda3/lib/python3.11/urllib/request.py:634[0m, in [0;36mHTTPErrorProcessor.http_response[0;34m(self, request, response)[0m
[1;32m    631[0m [38;5;66;03m# According to RFC 2616, "2xx" code indicates that the client's[39;00m
[1;32m    632[0m [38;5;66;03m# request was successfully received, understood, and accepted.[39;00m
[1;32m    633[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m ([38;5;241m200[39m [38;5;241m<[39m[38;5;241m=[39m code [38;5;241m<[39m [38;5;241m300[39m):
[0;32m--> 634[0m     response [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mparent[38;5;241m.[39merror(
[1;32m    635[0m         [38;5;124m'[39m[38;5;124mhttp[39m[38;5;124m'[39m, request, response, code, msg, hdrs)
[1;32m    637[0m [38;5;28;01mreturn[39;00m response

File [0;32m~/miniconda3/lib/python3.11/urllib/request.py:557[0m, in [0;36mOpenerDirector.error[0;34m(self, proto, *args)[0m
[1;32m    555[0m     http_err [38;5;241m=[39m [38;5;241m0[39m
[1;32m    556[0m args [38;5;241m=[39m ([38;5;28mdict[39m, proto, meth_name) [38;5;241m+[39m args
[0;32m--> 557[0m result [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_call_chain([38;5;241m*[39margs)
[1;32m    558[0m [38;5;28;01mif[39;00m result:
[1;32m    559[0m     [38;5;28;01mreturn[39;00m result

File [0;32m~/miniconda3/lib/python3.11/urllib/request.py:496[0m, in [0;36mOpenerDirector._call_chain[0;34m(self, chain, kind, meth_name, *args)[0m
[1;32m    494[0m [38;5;28;01mfor[39;00m handler [38;5;129;01min[39;00m handlers:
[1;32m    495[0m     func [38;5;241m=[39m [38;5;28mgetattr[39m(handler, meth_name)
[0;32m--> 496[0m     result [38;5;241m=[39m func([38;5;241m*[39margs)
[1;32m    497[0m     [38;5;28;01mif[39;00m result [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[1;32m    498[0m         [38;5;28;01mreturn[39;00m result

File [0;32m~/miniconda3/lib/python3.11/urllib/request.py:749[0m, in [0;36mHTTPRedirectHandler.http_error_302[0;34m(self, req, fp, code, msg, headers)[0m
[1;32m    746[0m fp[38;5;241m.[39mread()
[1;32m    747[0m fp[38;5;241m.[39mclose()
[0;32m--> 749[0m [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39mparent[38;5;241m.[39mopen(new, timeout[38;5;241m=[39mreq[38;5;241m.[39mtimeout)

File [0;32m~/miniconda3/lib/python3.11/urllib/request.py:525[0m, in [0;36mOpenerDirector.open[0;34m(self, fullurl, data, timeout)[0m
[1;32m    523[0m [38;5;28;01mfor[39;00m processor [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocess_response[38;5;241m.[39mget(protocol, []):
[1;32m    524[0m     meth [38;5;241m=[39m [38;5;28mgetattr[39m(processor, meth_name)
[0;32m--> 525[0m     response [38;5;241m=[39m meth(req, response)
[1;32m    527[0m [38;5;28;01mreturn[39;00m response

File [0;32m~/miniconda3/lib/python3.11/urllib/request.py:634[0m, in [0;36mHTTPErrorProcessor.http_response[0;34m(self, request, response)[0m
[1;32m    631[0m [38;5;66;03m# According to RFC 2616, "2xx" code indicates that the client's[39;00m
[1;32m    632[0m [38;5;66;03m# request was successfully received, understood, and accepted.[39;00m
[1;32m    633[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m ([38;5;241m200[39m [38;5;241m<[39m[38;5;241m=[39m code [38;5;241m<[39m [38;5;241m300[39m):
[0;32m--> 634[0m     response [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mparent[38;5;241m.[39merror(
[1;32m    635[0m         [38;5;124m'[39m[38;5;124mhttp[39m[38;5;124m'[39m, request, response, code, msg, hdrs)
[1;32m    637[0m [38;5;28;01mreturn[39;00m response

File [0;32m~/miniconda3/lib/python3.11/urllib/request.py:563[0m, in [0;36mOpenerDirector.error[0;34m(self, proto, *args)[0m
[1;32m    561[0m [38;5;28;01mif[39;00m http_err:
[1;32m    562[0m     args [38;5;241m=[39m ([38;5;28mdict[39m, [38;5;124m'[39m[38;5;124mdefault[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mhttp_error_default[39m[38;5;124m'[39m) [38;5;241m+[39m orig_args
[0;32m--> 563[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_call_chain([38;5;241m*[39margs)

File [0;32m~/miniconda3/lib/python3.11/urllib/request.py:496[0m, in [0;36mOpenerDirector._call_chain[0;34m(self, chain, kind, meth_name, *args)[0m
[1;32m    494[0m [38;5;28;01mfor[39;00m handler [38;5;129;01min[39;00m handlers:
[1;32m    495[0m     func [38;5;241m=[39m [38;5;28mgetattr[39m(handler, meth_name)
[0;32m--> 496[0m     result [38;5;241m=[39m func([38;5;241m*[39margs)
[1;32m    497[0m     [38;5;28;01mif[39;00m result [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[1;32m    498[0m         [38;5;28;01mreturn[39;00m result

File [0;32m~/miniconda3/lib/python3.11/urllib/request.py:643[0m, in [0;36mHTTPDefaultErrorHandler.http_error_default[0;34m(self, req, fp, code, msg, hdrs)[0m
[1;32m    642[0m [38;5;28;01mdef[39;00m [38;5;21mhttp_error_default[39m([38;5;28mself[39m, req, fp, code, msg, hdrs):
[0;32m--> 643[0m     [38;5;28;01mraise[39;00m HTTPError(req[38;5;241m.[39mfull_url, code, msg, hdrs, fp)

[0;31mHTTPError[0m: HTTP Error 400: Bad Request
HTTPError: HTTP Error 400: Bad Request

